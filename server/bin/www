#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('spotify-jukebox:server');
var http = require('http');

var spotifyManager = require('../manager/spotify-manager.js');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

const io = require('socket.io')(server, {
  cors: {
    origin: "*"
  }
});
io.on("connection", (socket) => {
  let interval;
  let ip = socket.handshake.address;
  console.log(`${ip} connected`);
  
  interval = setInterval(() => getNowPlayingAndEmit(socket), 1000);

  socket.on("disconnect", () => {
    console.log(`${ip} disconnected`);
    clearInterval(interval);
  });
});

const getNowPlayingAndEmit = socket => {
  // need to have set access token before making any spotify call
  spotifyManager.getSpotifyPlayer(socket.handshake.query.playerId).then(spotifyPlayer => {
    if (spotifyPlayer && spotifyPlayer.getAccessToken() != undefined) {
    spotifyPlayer.getMyCurrentPlayingTrack()
      .then(result => socket.emit("NowPlaying", JSON.stringify(result)))
      .catch(error => console.log('Error while retrieving now playing info in socket.io'))
    }
  });
};

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log(`Starting web server on port ${port}`);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
